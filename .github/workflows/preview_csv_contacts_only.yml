name: üìÑ Preview CSV Contacts Only
on:
  push:
    branches: ["dev", "master"]
  workflow_dispatch:
    inputs:
      rows_to_show:
        description: 'Number of rows to preview from extracted CSV'
        required: false
        default: 10
        type: number
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  contact-extraction:
    uses: sednabcn/services/.github/workflows/contact-extractor.yml@dev
    with:
      source_directory: "contact_details"
      output_directory: "contacts"

  preview:
    runs-on: ubuntu-latest
    needs: contact-extraction
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download contact extraction results
        uses: actions/download-artifact@v4
        with:
          name: latest-contact-extraction-results
          path: ./contacts
          
      - name: Find and Preview Latest CSV
        env:
          ROWS_TO_SHOW: ${{ inputs.rows_to_show || 10 }}
          DEBUG_MODE: ${{ inputs.debug }}
        run: |
          echo "üîç Contact CSV Analysis Started"
          echo "================================"
          
          # Debug mode logging
          if [ "$DEBUG_MODE" = "true" ]; then
            echo "üêõ DEBUG: Listing all files in contacts directory:"
            ls -la ./contacts/ || echo "‚ùå Contacts directory not found"
            echo ""
          fi
          
          # Find all CSV files and show what we're working with
          echo "üìÇ Searching for CSV files in ./contacts/"
          CSV_FILES=$(find ./contacts -type f -name "*.csv" 2>/dev/null)
          
          if [ -z "$CSV_FILES" ]; then
            echo "‚ùå No CSV files found in ./contacts/"
            echo "üîç Checking if contacts directory exists..."
            if [ -d "./contacts" ]; then
              echo "üìÅ Directory exists but is empty or contains no CSV files"
              echo "üìã Contents:"
              ls -la ./contacts/ || echo "Cannot list contents"
            else
              echo "üìÅ Directory ./contacts/ does not exist"
              echo "üîç Available directories:"
              find . -type d -maxdepth 2
            fi
            exit 1
          fi
          
          echo "‚úÖ Found CSV files:"
          echo "$CSV_FILES"
          echo ""
          
          # Sort by filename (which contains timestamp) to get the latest
          # Using version sort (-V) to handle the datetime format properly
          LATEST_CSV=$(echo "$CSV_FILES" | grep -E "edu_adults_contacts_[0-9]{8}_[0-9]{6}\.csv" | sort -V | tail -1)
          
          if [ -z "$LATEST_CSV" ]; then
            echo "‚ö†Ô∏è  No files matching expected pattern, using any CSV file found:"
            LATEST_CSV=$(echo "$CSV_FILES" | sort | tail -1)
          fi
          
          echo "üéØ Selected file: $(basename "$LATEST_CSV")"
          echo "üìÖ File timestamp from name: $(basename "$LATEST_CSV" | grep -o '[0-9]\{8\}_[0-9]\{6\}' || echo 'N/A')"
          echo "üïí File modification time: $(stat -c '%y' "$LATEST_CSV" 2>/dev/null || echo 'N/A')"
          echo "üìè File size: $(stat -c '%s' "$LATEST_CSV" 2>/dev/null || echo 'N/A') bytes"
          echo ""
          
          # Verify file exists and is readable
          if [ ! -f "$LATEST_CSV" ]; then
            echo "‚ùå Selected file does not exist: $LATEST_CSV"
            exit 1
          fi
          
          if [ ! -r "$LATEST_CSV" ]; then
            echo "‚ùå Selected file is not readable: $LATEST_CSV"
            exit 1
          fi
          
          # Check if file is empty
          if [ ! -s "$LATEST_CSV" ]; then
            echo "‚ö†Ô∏è  Selected file is empty: $LATEST_CSV"
            exit 1
          fi
          
          echo "üìä CSV Content Analysis"
          echo "======================"
          
          # Show file structure
          echo "üèóÔ∏è  File structure:"
          TOTAL_LINES=$(wc -l < "$LATEST_CSV")
          HEADER_LINE=$(head -1 "$LATEST_CSV")
          DATA_LINES=$((TOTAL_LINES - 1))
          
          echo "   Total lines: $TOTAL_LINES"
          echo "   Header: $HEADER_LINE"
          echo "   Data rows: $DATA_LINES"
          echo ""
          
          # Preview content
          echo "üëÄ Preview (first $ROWS_TO_SHOW lines):"
          echo "======================================"
          head -n "$ROWS_TO_SHOW" "$LATEST_CSV" | cat -n
          echo ""
          
          # Data quality check
          echo "üîç Data Quality Check"
          echo "===================="
          
          if [ $DATA_LINES -eq 0 ]; then
            echo "‚ùå No data rows found (only header)"
          else
            # Check for placeholder data
            PLACEHOLDER_COUNT=$(tail -n +2 "$LATEST_CSV" | grep -c "Contact [0-9]" || echo "0")
            REAL_DATA_COUNT=$((DATA_LINES - PLACEHOLDER_COUNT))
            
            echo "üìà Statistics:"
            echo "   Real contacts: $REAL_DATA_COUNT"
            echo "   Placeholder entries: $PLACEHOLDER_COUNT"
            
            if [ $PLACEHOLDER_COUNT -gt 0 ]; then
              echo "‚ö†Ô∏è  Warning: Found $PLACEHOLDER_COUNT placeholder entries"
            fi
            
            # Check for required fields
            if echo "$HEADER_LINE" | grep -q "name.*email"; then
              echo "‚úÖ Required columns found (name, email)"
            else
              echo "‚ö†Ô∏è  Warning: Expected columns (name, email) may be missing"
            fi
            
            # Show unique organizations if present
            if echo "$HEADER_LINE" | grep -q "organization"; then
              echo ""
              echo "üè¢ Organizations found:"
              tail -n +2 "$LATEST_CSV" | cut -d',' -f4 | grep -v "^$" | sort | uniq -c | head -5
            fi
          fi
          
          echo ""
          echo "‚úÖ Analysis complete for: $(basename "$LATEST_CSV")"
          
          # Export results for potential use in other jobs
          echo "csv_file=$LATEST_CSV" >> $GITHUB_OUTPUT
          echo "total_contacts=$DATA_LINES" >> $GITHUB_OUTPUT
          echo "real_contacts=$REAL_DATA_COUNT" >> $GITHUB_OUTPUT
