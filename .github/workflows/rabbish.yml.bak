
  name: Enhanced Production Email Campaign System

on:
  push:
    branches: ["dev","main", "master"]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no emails sent)'
        required: false
        default: 'false'
        type: boolean
      target_domain:
        description: 'Target domain for campaigns'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - 'education'
          - 'finance'
          - 'healthcare'
          - 'industry'
          - 'technology'
          - 'government'
      campaign_filter:
        description: 'Filter specific campaigns'
        required: false
        default: ''
        type: string
      contact_source:
        description: 'Specific contact source to use'
        required: false
        default: ''
        type: string
      force_validation:
        description: 'Force full data validation'
        required: false
        default: true
        type: boolean
      enable_real_time_tracking:
        description: 'Enable real-time email tracking'
        required: false
        default: true
        type: boolean
      skip_feedback_injection:
        description: 'Skip feedback email integration'
        required: false
        default: 'false'
        type: boolean
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean
      batch_size:
        description: 'Email batch size for processing'
        required: false
        default: '50'
        type: string
      delay_between_batches:
        description: 'Delay between batches (seconds)'
        required: false
        default: '5'
        type: string
  schedule:
    - cron: "0 9 * * 1-5"   # Weekdays at 9 AM UTC

permissions:
  contents: read
  issues: write
  actions: write
  packages: write

env:
  ALERT_EMAIL: alerts@modelphysmat.com
  FEEDBACK_EMAIL: feedback@modelphysmat.com
  PYTHON_VERSION: '3.11'
  PRODUCTION_MODE: true
  TRACKING_DIR: tracking
  SCHEDULED_DIR: scheduled-campaigns
  TEMPLATES_DIR: campaign-templates
  CONTACTS_DIR: contacts

jobs:
  enhanced-validation-and-prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      validation_status: ${{ steps.validation.outputs.status }}
      contact_count: ${{ steps.contact_analysis.outputs.count }}
      domain_campaigns: ${{ steps.domain_analysis.outputs.campaigns }}
      validation_report: ${{ steps.validation.outputs.report }}
      real_data_found: ${{ steps.contact_validation.outputs.real_data_found }}
      contact_files_count: ${{ steps.contact_validation.outputs.contact_files_count }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python environment with enhanced error handling
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies with comprehensive validation
        run: |
          echo "Installing Python dependencies for enhanced production system..."
          python -m pip install --upgrade pip setuptools wheel
          
          # Core dependencies with version pinning
          pip install requests>=2.31.0 pandas>=2.0.0 python-docx>=0.8.11
          pip install openpyxl>=3.1.0 xlrd>=2.0.1 jinja2>=3.1.0
          pip install google-auth google-auth-oauthlib google-auth-httplib2
          pip install google-api-python-client>=2.0.0 PyGithub>=1.55
          pip install gspread>=5.0.0 oauth2client>=4.1.0
          pip install beautifulsoup4 lxml urllib3 chardet
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "Installed requirements from requirements.txt"
          fi
          
          echo "Dependencies installation completed"

      # ... (keeping all existing validation steps from your workflow)
      # I'll focus on showing the new integration points

  enhanced-campaign-execution:
    needs: enhanced-validation-and-prepare
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: needs.enhanced-validation-and-prepare.outputs.validation_status == '0'
    outputs:
      emails_queued: ${{ steps.execution.outputs.emails_queued }}
      batch_directory: ${{ steps.execution.outputs.batch_directory }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install requests>=2.31.0 pandas>=2.0.0 python-docx>=0.8.11
          pip install openpyxl>=3.1.0 xlrd>=2.0.1 jinja2>=3.1.0
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Enhanced campaign execution with queue mode
        id: execution
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
        run: |
          echo "Starting campaign execution..."
          
          # Build command with queue mode for non-dry-run
          ARGS=(
            "--contacts" "$PWD/$CONTACTS_DIR"
            "--scheduled" "$PWD/$SCHEDULED_DIR"
            "--tracking" "$PWD/$TRACKING_DIR"
            "--alerts" "$ALERT_EMAIL"
            "--feedback" "$FEEDBACK_EMAIL"
          )

          # Add dry-run mode (no queue needed)
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            ARGS+=("--dry-run")
            echo "Running in dry-run mode"
          else
            # In live mode, use queue if SMTP not configured, direct send otherwise
            if [ -z "$SMTP_HOST" ] || [ -z "$SMTP_USER" ] || [ -z "$SMTP_PASS" ]; then
              ARGS+=("--queue-emails")
              echo "SMTP not configured - queueing emails for later sending"
            else
              echo "SMTP configured - will attempt direct sending"
            fi
          fi
          
          # Add other parameters
          if [ -n "${{ github.event.inputs.target_domain }}" ]; then
            ARGS+=("--domain" "${{ github.event.inputs.target_domain }}")
          fi
          
          if [ "${{ github.event.inputs.batch_size }}" ]; then
            ARGS+=("--batch-size" "${{ github.event.inputs.batch_size }}")
          fi
          
          # Execute campaign
          python utils/docx_parser.py "${ARGS[@]}" 2>&1 | tee campaign_execution.log
          
          # Check for queue summary
          if [ -f "github_actions_email_summary.json" ]; then
            echo "Emails queued successfully"
            echo "emails_queued=true" >> $GITHUB_OUTPUT
            
            BATCH_DIR=$(python3 -c "import json; print(json.load(open('github_actions_email_summary.json'))['batch_directory'])")
            echo "batch_directory=$BATCH_DIR" >> $GITHUB_OUTPUT
            echo "Batch directory: $BATCH_DIR"
          else
            echo "No emails queued"
            echo "emails_queued=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload campaign artifacts for email sending
        if: steps.execution.outputs.emails_queued == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-production-results-0-${{ github.run_id }}
          path: |
            github_actions_email_summary.json
            campaign_summary_email.json
            email_batch_*/
            *.log
          retention-days: 7

  send-queued-emails:
    needs: enhanced-campaign-execution
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.dry_run != 'true' && 
      needs.enhanced-campaign-execution.outputs.emails_queued == 'true'
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas python-docx openpyxl

      - name: Download campaign artifacts
        uses: actions/download-artifact@v4
        with:
          name: enhanced-production-results-0-${{ github.run_id }}
          path: ./

      - name: Send queued emails via SMTP
        env:
          SMTP_SERVER: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASS }}
          MAIL_FROM: ${{ secrets.SMTP_USER }}
        run: |
          echo "Checking for queued emails..."
          
          if [ ! -f "github_actions_email_summary.json" ]; then
            echo "No queued emails found - campaign may have sent directly"
            exit 0
          fi
          
          echo "Found queued emails, processing..."
          cat github_actions_email_summary.json
          
          # Create email sender script inline
          cat > send_queued.py << 'SCRIPT'
          import json
          import smtplib
          import ssl
          import os
          import time
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from pathlib import Path
          
          def send_email(smtp, to_email, subject, body, from_email, from_name):
              msg = MIMEMultipart('alternative')
              msg['From'] = f"{from_name} <{from_email}>"
              msg['To'] = to_email
              msg['Subject'] = subject
              
              # Detect HTML
              if '<html' in body.lower() or '<div' in body.lower():
                  text_part = MIMEText(body.replace('<br>', '\n').replace('<p>', '\n'), 'plain')
                  html_part = MIMEText(body, 'html')
                  msg.attach(text_part)
                  msg.attach(html_part)
              else:
                  msg.attach(MIMEText(body, 'plain'))
              
              smtp.send_message(msg)
          
          # Load summary
          with open('github_actions_email_summary.json') as f:
              summary = json.load(f)
          
          batch_dir = Path(summary['batch_directory'])
          
          if not batch_dir.exists():
              print(f"ERROR: Batch directory not found: {batch_dir}")
              exit(1)
          
          # Get email files
          email_files = sorted(batch_dir.glob('email_*.json'))
          print(f"Found {len(email_files)} emails to send")
          
          # Setup SMTP
          smtp_host = os.environ.get('SMTP_SERVER')
          smtp_port = int(os.environ.get('SMTP_PORT', 587))
          smtp_user = os.environ.get('SMTP_USERNAME')
          smtp_pass = os.environ.get('SMTP_PASSWORD')
          from_email = os.environ.get('MAIL_FROM', smtp_user)
          
          if not all([smtp_host, smtp_user, smtp_pass]):
              print("ERROR: SMTP credentials not configured")
              exit(1)
          
          print(f"Connecting to {smtp_host}:{smtp_port}")
          
          context = ssl.create_default_context()
          server = smtplib.SMTP(smtp_host, smtp_port, timeout=60)
          server.starttls(context=context)
          server.login(smtp_user, smtp_pass)
          
          sent = 0
          failed = 0
          
          for email_file in email_files:
              try:
                  with open(email_file) as f:
                      email_data = json.load(f)
                  
                  print(f"Sending to {email_data['to']}...")
                  
                  send_email(
                      server,
                      email_data['to'],
                      email_data['subject'],
                      email_data['body'],
                      from_email,
                      email_data.get('from_name', 'Campaign System')
                  )
                  
                  sent += 1
                  print(f"  ✅ Sent ({sent}/{len(email_files)})")
                  
                  # Rate limiting
                  time.sleep(1.5)
                  
              except Exception as e:
                  failed += 1
                  print(f"  ❌ Failed: {e}")
          
          server.quit()
          
          print(f"\n=== EMAIL SENDING COMPLETE ===")
          print(f"Sent: {sent}")
          print(f"Failed: {failed}")
          print(f"Total: {len(email_files)}")
          SCRIPT
          
          # Run the sender
          python send_queued.py

      - name: Send summary email
        if: always()
        env:
          SMTP_SERVER: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASS }}
        run: |
          if [ -f "campaign_summary_email.json" ]; then
            echo "Sending campaign summary..."
            
            python << 'EOF'
          import json
          import smtplib
          import ssl
          import os
          from email.mime.text import MIMEText
          
          with open('campaign_summary_email.json') as f:
              summary = json.load(f)
          
          msg = MIMEText(summary['body'])
          msg['Subject'] = summary['subject']
          msg['From'] = summary['from_email']
          msg['To'] = summary['to']
          
          context = ssl.create_default_context()
          server = smtplib.SMTP(os.environ['SMTP_SERVER'], int(os.environ['SMTP_PORT']))
          server.starttls(context=context)
          server.login(os.environ['SMTP_USERNAME'], os.environ['SMTP_PASSWORD'])
          server.send_message(msg)
          server.quit()
          
          print(f"Summary sent to {summary['to']}")
          EOF
          fi
  enhanced-cleanup:
    needs: [enhanced-validation-and-prepare, enhanced-campaign-execution, send-queued-emails]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Enhanced cleanup of sensitive data
        run: |
          echo "Enhanced cleanup of sensitive data and temporary files..."
          
          # Enhanced credential cleanup
          rm -f /tmp/google_svc.json
          rm -f .env
          rm -f *.key
          rm -f *.pem
          rm -f *_credentials.json
          
          # Clear cached credentials
          if [ -d ~/.cache ]; then
            find ~/.cache -name "*credential*" -delete 2>/dev/null || true
            find ~/.cache -name "*token*" -delete 2>/dev/null || true
          fi
          
          # Python cache cleanup
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          
          # Environment variable cleanup
          unset GOOGLE_SVC_JSON
          unset SMTP_PASS
          unset IMAP_PASS
          unset GITHUB_TOKEN
          
          echo "Enhanced cleanup completed successfully"        
  enhanced-cleanup:
    needs: [enhanced-validation-and-prepare, enhanced-campaign-execution]
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Enhanced cleanup of sensitive data
        run: |
          echo "Enhanced cleanup of sensitive data and temporary files..."
          
          # Enhanced credential cleanup
          echo "Removing enhanced credential files..."
          rm -f /tmp/google_svc.json
          rm -f .env
          rm -f *.key
          rm -f *.pem
          rm -f *_credentials.json
          
          # Enhanced cache cleanup
          echo "Clearing enhanced cached credentials..."
          if [ -d ~/.cache ]; then
            find ~/.cache -name "*credential*" -delete 2>/dev/null || true
            find ~/.cache -name "*token*" -delete 2>/dev/null || true
            find ~/.cache -name "*oauth*" -delete 2>/dev/null || true
          fi
          
          # Enhanced Python cache cleanup
          echo "Clearing enhanced Python cache..."
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "*.pyo" -delete 2>/dev/null || true
          
          # Enhanced temporary file cleanup (preserve important logs)
          echo "Cleaning enhanced temporary files..."
          if [ -d tracking ]; then
            find tracking -name "*.tmp" -delete 2>/dev/null || true
            find tracking -name "*temp*" -delete 2>/dev/null || true
            find tracking -name "*.lock" -delete 2>/dev/null || true
          fi
          
          # Enhanced environment variable cleanup
          unset GOOGLE_SVC_JSON
          unset SMTP_PASS
          unset IMAP_PASS
          unset GITHUB_TOKEN
          unset GOOGLE_APPLICATION_CREDENTIALS
          
          echo "Enhanced cleanup completed successfully"
          
      - name: Generate enhanced cleanup report
        run: |
          echo "ENHANCED CLEANUP SUMMARY" >> enhanced_cleanup_report.md
          echo "=========================" >> enhanced_cleanup_report.md
          echo "" >> enhanced_cleanup_report.md
          echo "**Cleanup Date:** $(date)" >> enhanced_cleanup_report.md
          echo "**Workflow Run:** ${{ github.run_id }}" >> enhanced_cleanup_report.md
          echo "**Cleanup Type:** Enhanced Production Cleanup" >> enhanced_cleanup_report.md
          echo "" >> enhanced_cleanup_report.md
          echo "### Enhanced Files Removed:" >> enhanced_cleanup_report.md
          echo "- Google service account credentials" >> enhanced_cleanup_report.md
          echo "- SMTP/IMAP authentication files" >> enhanced_cleanup_report.md
          echo "- Python cache and bytecode files" >> enhanced_cleanup_report.md
          echo "- Temporary tracking files" >> enhanced_cleanup_report.md
          echo "- OAuth tokens and cached credentials" >> enhanced_cleanup_report.md
          echo "" >> enhanced_cleanup_report.md
          echo "### Enhanced Security Measures:" >> enhanced_cleanup_report.md
          echo "- All environment variables cleared" >> enhanced_cleanup_report.md
          echo "- Cache directories comprehensively cleaned" >> enhanced_cleanup_report.md
          echo "- Sensitive authentication data purged" >> enhanced_cleanup_report.md
          echo "- Temporary files removed (logs preserved)" >> enhanced_cleanup_report.md
          echo "" >> enhanced_cleanup_report.md
          echo "### Data Preservation:" >> enhanced_cleanup_report.md
          echo "- Execution logs preserved for analysis" >> enhanced_cleanup_report.md
          echo "- Tracking data maintained for metrics" >> enhanced_cleanup_report.md
          echo "- Campaign reports retained for review" >> enhanced_cleanup_report.md
          echo "" >> enhanced_cleanup_report.md
          echo "**Status:** Enhanced cleanup completed successfully" >> enhanced_cleanup_report.md
          echo "**Security Level:** Production-grade credential cleanup" >> enhanced_cleanup_report.md
          
          echo "Enhanced security cleanup completed for workflow run ${{ github.run_id }}"
          echo "All sensitive data removed while preserving important execution artifacts"
