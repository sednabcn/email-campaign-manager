name: Reporting and Notifications

on:
  workflow_call:
    inputs:
      execution_status:
        required: true
        type: string
      contact_count:
        required: true
        type: string
      campaign_count:
        required: true
        type: string
      dry_run:
        required: true
        type: boolean

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      report_created: ${{ steps.generate_report.outputs.created }}
      notification_sent: ${{ steps.send_notification.outputs.sent }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas==2.1.4 jinja2==3.1.2 requests==2.31.0

      - name: Download execution artifacts
        uses: actions/download-artifact@v4
        with:
          name: execution-results-${{ github.run_id }}

      - name: Download validation artifacts
        uses: actions/download-artifact@v4
        with:
          name: validation-results-${{ github.run_id }}

      - name: Generate comprehensive campaign report
        id: generate_report
        run: |
          echo "Generating comprehensive campaign report with contact details..."
          
          python << 'EOF'
          import json
          import pandas as pd
          from datetime import datetime
          from pathlib import Path
          import os

          # Load execution data
          try:
              with open('execution_log.json', 'r') as f:
                  execution_data = json.load(f)
              print("‚úÖ Loaded execution data")
          except FileNotFoundError:
              print("‚ùå No execution data found")
              execution_data = {
                  'summary': {'total_processed': 0, 'total_sent': 0, 'total_failed': 0},
                  'processed_emails': [],
                  'sent_emails': [],
                  'failed_emails': []
              }

          # Load contact details
          try:
              contact_report_df = pd.read_csv('detailed_contact_report.csv')
              print(f"‚úÖ Loaded detailed contact report with {len(contact_report_df)} records")
          except FileNotFoundError:
              print("‚ùå No detailed contact report found")
              contact_report_df = pd.DataFrame()

          # Load validation data
          try:
              with open('contact_validation_results.json', 'r') as f:
                  validation_data = json.load(f)
          except FileNotFoundError:
              validation_data = {'total_contacts': 0, 'validation_errors': []}

          try:
              with open('campaign_validation_results.json', 'r') as f:
                  campaign_data = json.load(f)
          except FileNotFoundError:
              campaign_data = {'total_campaigns': 0, 'campaigns': []}

          # Generate comprehensive report
          report_data = {
              'report_id': f"campaign-report-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
              'generation_time': datetime.now().isoformat(),
              'workflow_run_id': "${{ github.run_id }}",
              'execution_mode': "dry_run" if "${{ inputs.dry_run }}" == "true" else "live",
              'summary': {
                  'total_contacts_loaded': validation_data.get('total_contacts', 0),
                  'total_campaigns_available': campaign_data.get('total_campaigns', 0),
                  'emails_processed': execution_data['summary'].get('total_processed', 0),
                  'emails_sent': execution_data['summary'].get('total_sent', 0),
                  'emails_failed': execution_data['summary'].get('total_failed', 0),
                  'success_rate': execution_data['summary'].get('success_rate', 0)
              },
              'contact_details': [],
              'campaign_details': campaign_data.get('campaigns', []),
              'validation_summary': {
                  'validation_errors_count': len(validation_data.get('validation_errors', [])),
                  'validation_errors': validation_data.get('validation_errors', [])[:5]  # Limit for security
              }
          }

          # Process contact details from the detailed report
          if not contact_report_df.empty:
              for _, contact in contact_report_df.iterrows():
                  contact_detail = {
                      'name': contact.get('name', 'Unknown'),
                      'email': contact.get('email', 'unknown@example.com'),
                      'campaign': contact.get('campaign', 'Unknown'),
                      'status': contact.get('status', 'unknown'),
                      'subject_line': contact.get('subject', 'No subject'),
                      'processed_time': contact.get('processed_time', 'Unknown')
                  }
                  report_data['contact_details'].append(contact_detail)

          # Save comprehensive JSON report
          with open('comprehensive_campaign_report.json', 'w') as f:
              json.dump(report_data, f, indent=2)

          # Generate HTML report for better readability
          html_report = f"""
          <!DOCTYPE html>
          <html>
          <head>
              <title>Campaign Report - {report_data['report_id']}</title>
              <style>
                  body {{ font-family: Arial, sans-serif; margin: 20px; }}
                  .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
                  .summary {{ margin: 20px 0; }}
                  .metrics {{ display: flex; gap: 20px; margin: 20px 0; }}
                  .metric {{ background-color: #e9ecef; padding: 15px; border-radius: 5px; flex: 1; }}
                  .contact-list {{ margin: 20px 0; }}
                  table {{ width: 100%; border-collapse: collapse; }}
                  th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                  th {{ background-color: #f2f2f2; }}
                  .status-sent {{ color: green; font-weight: bold; }}
                  .status-failed {{ color: red; font-weight: bold; }}
                  .footer {{ margin-top: 30px; padding: 20px; background-color: #f8f9fa; }}
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üìß Email Campaign Report</h1>
                  <p><strong>Report ID:</strong> {report_data['report_id']}</p>
                  <p><strong>Generated:</strong> {report_data['generation_time']}</p>
                  <p><strong>Mode:</strong> {report_data['execution_mode'].upper()}</p>
                  <p><strong>Workflow Run:</strong> {report_data['workflow_run_id']}</p>
              </div>

              <div class="metrics">
                  <div class="metric">
                      <h3>üìä Contacts</h3>
                      <p>Loaded: {report_data['summary']['total_contacts_loaded']}</p>
                      <p>Processed: {report_data['summary']['emails_processed']}</p>
                  </div>
                  <div class="metric">
                      <h3>üìß Emails</h3>
                      <p>Sent: {report_data['summary']['emails_sent']}</p>
                      <p>Failed: {report_data['summary']['emails_failed']}</p>
                  </div>
                  <div class="metric">
                      <h3>üìà Success Rate</h3>
                      <p>{report_data['summary']['success_rate']}%</p>
                  </div>
              </div>

              <div class="contact-list">
                  <h2>üìã Contact Details</h2>
          """

          # Add contact table if we have contact details
          if report_data['contact_details']:
              html_report += """
                  <table>
                      <thead>
                          <tr>
                              <th>Name</th>
                              <th>Email</th>
                              <th>Campaign</th>
                              <th>Status</th>
                              <th>Subject</th>
                              <th>Processed Time</th>
                          </tr>
                      </thead>
                      <tbody>
              """
              
              for contact in report_data['contact_details']:
                  status_class = "status-sent" if contact['status'] == 'sent' else "status-failed"
                  html_report += f"""
                          <tr>
                              <td>{contact['name']}</td>
                              <td>{contact['email']}</td>
                              <td>{contact['campaign']}</td>
                              <td class="{status_class}">{contact['status'].upper()}</td>
                              <td>{contact['subject_line']}</td>
                              <td>{contact['processed_time']}</td>
                          </tr>
                  """
              
              html_report += """
                      </tbody>
                  </table>
              """
          else:
              html_report += "<p>No contact details available.</p>"

          # Add campaign information
          html_report += """
              </div>
              
              <div class="summary">
                  <h2>üìù Campaign Information</h2>
          """

          if report_data['campaign_details']:
              html_report += "<ul>"
              for campaign in report_data['campaign_details']:
                  html_report += f"<li><strong>{campaign['name']}</strong> - {campaign.get('variables', 0)} template variables</li>"
              html_report += "</ul>"
          else:
              html_report += "<p>No campaign details available.</p>"

          # Add validation summary if there were errors
          if report_data['validation_summary']['validation_errors_count'] > 0:
              html_report += f"""
                  <h2>‚ö†Ô∏è Validation Issues</h2>
                  <p><strong>Total validation errors:</strong> {report_data['validation_summary']['validation_errors_count']}</p>
                  <ul>
              """
              for error in report_data['validation_summary']['validation_errors']:
                  html_report += f"<li>{error}</li>"
              html_report += "</ul>"

          html_report += f"""
              </div>
              
              <div class="footer">
                  <p><strong>Note:</strong> This report was generated automatically by the Email Campaign System.</p>
                  <p><strong>Execution Status:</strong> {report_data['execution_mode'].upper()} mode</p>
                  {f'<p><strong>Warning:</strong> This was a DRY-RUN execution. No actual emails were sent.</p>' if report_data['execution_mode'] == 'dry_run' else ''}
              </div>
          </body>
          </html>
          """

          # Save HTML report
          with open('campaign_report.html', 'w') as f:
              f.write(html_report)

          # Generate CSV summary for easy data analysis
          if not contact_report_df.empty:
              # Create summary CSV
              summary_df = contact_report_df.copy()
              summary_df.to_csv('campaign_summary.csv', index=False)
              print(f"‚úÖ Generated CSV summary with {len(summary_df)} contact records")

          print(f"‚úÖ Generated comprehensive report: {report_data['report_id']}")
          print(f"   - Total contacts processed: {report_data['summary']['emails_processed']}")
          print(f"   - Emails sent: {report_data['summary']['emails_sent']}")
          print(f"   - Success rate: {report_data['summary']['success_rate']}%")

          # Set output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write("created=true\n")
              f.write(f"report_id={report_data['report_id']}\n")
              f.write(f"contacts_processed={report_data['summary']['emails_processed']}\n")
              f.write(f"success_rate={report_data['summary']['success_rate']}\n")
          EOF

      - name: Send notification with detailed report
        id: send_notification
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
        run: |
          echo "Sending notification with comprehensive report..."
          
          python << 'EOF'
          import json
          import os
          import requests
          import pandas as pd
          import smtplib
          import ssl
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from email.mime.base import MIMEBase
          from email import encoders
          from datetime import datetime

          # Load report data
          try:
              with open('comprehensive_campaign_report.json', 'r') as f:
                  report_data = json.load(f)
          except FileNotFoundError:
              print("‚ùå No report data found")
              exit(1)

          execution_status = "${{ inputs.execution_status }}"
          dry_run = "${{ inputs.dry_run }}" == "true"
          
          # Determine status emoji and priority
          if execution_status == "success":
              status_emoji = "‚úÖ SUCCESS"
              priority = "success"
          elif execution_status == "partial":
              status_emoji = "‚ö†Ô∏è PARTIAL SUCCESS"  
              priority = "warning"
          else:
              status_emoji = "‚ùå FAILED"
              priority = "error"

          # Create GitHub issue notification
          github_token = os.getenv('GITHUB_TOKEN')
          if github_token:
              try:
                  repo = "${{ github.repository }}"
                  
                  # Create detailed issue body with contact list
                  issue_body = f"""# üìß Email Campaign Report - {status_emoji}

          ## üéØ Executive Summary
          **Report ID:** {report_data['report_id']}  
          **Execution Mode:** {report_data['execution_mode'].upper()}  
          **Status:** {status_emoji}  
          **Success Rate:** {report_data['summary']['success_rate']}%

          ## üìä Campaign Metrics
          | Metric | Count |
          |--------|-------|
          | Contacts Loaded | {report_data['summary']['total_contacts_loaded']} |
          | Emails Processed | {report_data['summary']['emails_processed']} |
          | Emails Sent | {report_data['summary']['emails_sent']} |
          | Failed Emails | {report_data['summary']['emails_failed']} |

          ## üìã Contact Processing Details
          """

                  if report_data['contact_details']:
                      issue_body += "### Processed Contacts\n\n"
                      issue_body += "| Name | Email | Campaign | Status | Subject |\n"
                      issue_body += "|------|-------|----------|--------|----------|\n"
                      
                      # Limit to first 20 contacts in GitHub issue to avoid size limits
                      for contact in report_data['contact_details'][:20]:
                          status_icon = "‚úÖ" if contact['status'] == 'sent' else "‚ùå"
                          issue_body += f"| {contact['name']} | {contact['email']} | {contact['campaign']} | {status_icon} {contact['status']} | {contact['subject_line'][:50]}... |\n"
                      
                      if len(report_data['contact_details']) > 20:
                          remaining = len(report_data['contact_details']) - 20
                          issue_body += f"\n*... and {remaining} more contacts (see attached artifacts)*\n"
                  else:
                      issue_body += "No contact details available.\n"

                  # Add campaign information
                  issue_body += f"\n## üìù Campaign Information\n"
                  if report_data['campaign_details']:
                      for campaign in report_data['campaign_details']:
                          issue_body += f"- **{campaign['name']}**: {campaign.get('variables', 0)} template variables\n"

                  # Add validation issues if any
                  if report_data['validation_summary']['validation_errors_count'] > 0:
                      issue_body += f"\n## ‚ö†Ô∏è Validation Issues ({report_data['validation_summary']['validation_errors_count']} total)\n"
                      for error in report_data['validation_summary']['validation_errors']:
                          issue_body += f"- {error}\n"

                  issue_body += f"""
          ## üîß Technical Details
          - **Workflow Run:** ${{ github.run_id }}
          - **Generation Time:** {report_data['generation_time']}
          - **Mode:** {report_data['execution_mode'].upper()}
          {'- **Note:** This was a DRY-RUN - no actual emails were sent' if dry_run else ''}

          ---
          *Generated automatically by Email Campaign System*
          """

                  headers = {
                      'Authorization': f'token {github_token}',
                      'Accept': 'application/vnd.github.v3+json',
                      'User-Agent': 'Email-Campaign-System'
                  }

                  issue_data = {
                      'title': f'Campaign Report {status_emoji} - {report_data["report_id"]}',
                      'body': issue_body,
                      'labels': ['campaign-report', priority, 'automated']
                  }

                  response = requests.post(
                      f'https://api.github.com/repos/{repo}/issues',
                      headers=headers,
                      json=issue_data,
                      timeout=30
                  )

                  if response.status_code == 201:
                      issue_data = response.json()
                      print(f"‚úÖ Created GitHub issue #{issue_data['number']}")
                      print(f"   URL: {issue_data['html_url']}")
                  else:
                      print(f"‚ùå Failed to create GitHub issue: {response.status_code}")

              except Exception as e:
                  print(f"‚ùå Error creating GitHub issue: {e}")

          # Send email notification if configured
          notification_email = os.getenv('NOTIFICATION_EMAIL')
          smtp_user = os.getenv('SMTP_USER')
          smtp_pass = os.getenv('SMTP_PASS')

          if notification_email and smtp_user and smtp_pass:
              try:
                  print(f"Sending email notification to {notification_email}")
                  
                  context = ssl.create_default_context()
                  server = smtplib.SMTP(os.getenv('SMTP_HOST', 'smtp.gmail.com'), 587)
                  server.starttls(context=context)
                  server.login(smtp_user, smtp_pass)

                  # Create email with attachments
                  msg = MIMEMultipart()
                  msg['From'] = smtp_user
                  msg['To'] = notification_email
                  msg['Subject'] = f"Campaign Report {status_emoji} - {report_data['summary']['emails_processed']} contacts processed"

                  # Email body
                  body = f"""Campaign Execution Report

                  Status: {status_emoji}
                  Report ID: {report_data['report_id']}
                  Mode: {report_data['execution_mode'].upper()}

                  Summary:
                  - Contacts Processed: {report_data['summary']['emails_processed']}
                  - Emails Sent: {report_data['summary']['emails_sent']}
                  - Failed: {report_data['summary']['emails_failed']}
                  - Success Rate: {report_data['summary']['success_rate']}%

                  Detailed contact list and full report are attached.

                  Contact Details:"""

                  # Add contact summary to email body
                  if report_data['contact_details']:
                    for contact in report_data['contact_details'][:10]:  # First 10 in email body
                    status_symbol = "‚úì" if contact['status'] == 'sent' else "‚úó"
                    body += f"""
                    - {contact['name']} ({contact['email']}) - {status_symbol} {contact['status'].upper()}
                    Campaign: {contact['campaign']}
                    Subject: {contact['subject_line']}
                    """
    
                    if len(report_data['contact_details']) > 10:
                      remaining = len(report_data['contact_details']) - 10
                      body += f"""
                  ... and {remaining} more contacts (see attached files for complete list)
                  """

                  body += f"""

                  Technical Details: 
                  - Workflow Run: ${{ github.run_id }}
                  - Generation Time: {report_data['generation_time']}
                  {"- Note: DRY-RUN mode - no emails actually sent" if dry_run else ""}

                  Best regards,
                  Email Campaign System
                  """
                  msg.attach(MIMEText(body, 'plain'))

                  # Attach HTML report
                  try:
                      with open('campaign_report.html', 'rb') as f:
                          html_attachment = MIMEBase('application', 'octet-stream')
                          html_attachment.set_payload(f.read())
                      
                      encoders.encode_base64(html_attachment)
                      html_attachment.add_header(
                          'Content-Disposition',
                          f'attachment; filename="campaign_report_{report_data["report_id"]}.html"'
                      )
                      msg.attach(html_attachment)
                      print("Attached HTML report")
                  except FileNotFoundError:
                      print("HTML report not found, skipping attachment")

                  # Attach CSV summary if available
                  try:
                      with open('campaign_summary.csv', 'rb') as f:
                          csv_attachment = MIMEBase('application', 'octet-stream')
                          csv_attachment.set_payload(f.read())
                      
                      encoders.encode_base64(csv_attachment)
                      csv_attachment.add_header(
                          'Content-Disposition',
                          f'attachment; filename="campaign_contacts_{report_data["report_id"]}.csv"'
                      )
                      msg.attach(csv_attachment)
                      print("Attached CSV contact list")
                  except FileNotFoundError:
                      print("CSV summary not found, skipping attachment")

                  # Send email
                  server.send_message(msg)
                  server.quit()
                  
                  print(f"‚úÖ Email notification sent to {notification_email}")
                  notification_sent = True

              except Exception as e:
                  print(f"‚ùå Failed to send email notification: {e}")
                  notification_sent = False
          else:
              print("Email notification not configured")
              notification_sent = False

          # Set output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"sent={notification_sent}\n")
          EOF

      - name: Upload comprehensive report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: campaign-reports-${{ github.run_id }}
          path: |
            comprehensive_campaign_report.json
            campaign_report.html
            campaign_summary.csv
            detailed_contact_report.csv
          retention-days: 90

      - name: Update workflow summary with contact details
        run: |
          echo "## üìß Comprehensive Campaign Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ inputs.execution_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** ${{ inputs.dry_run == 'true' && 'DRY-RUN' || 'LIVE' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Contacts Processed:** ${{ steps.generate_report.outputs.contacts_processed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Success Rate:** ${{ steps.generate_report.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add contact details preview if available
          if [ -f "detailed_contact_report.csv" ]; then
            echo "### üìã Contact Processing Preview" >> $GITHUB_STEP_SUMMARY
            echo "| Name | Email | Status | Campaign |" >> $GITHUB_STEP_SUMMARY  
            echo "|------|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
            
            # Show first 5 contacts in summary
            python -c "
          import pandas as pd
          try:
            df = pd.read_csv('detailed_contact_report.csv')
            for _, row in df.head(5).iterrows():
              status_icon = '‚úÖ' if row['status'] == 'sent' else '‚ùå'
              print(f'| {row[\"name\"]} | {row[\"email\"]} | {status_icon} {row[\"status\"]} | {row[\"campaign\"]} |')
          except Exception as e:
            print('| Error loading contact details | - | - | - |')
          " >> $GITHUB_STEP_SUMMARY
            
            # Count total contacts
            TOTAL_CONTACTS=$(python -c "
          import pandas as pd
          try:
            df = pd.read_csv('detailed_contact_report.csv')
            print(len(df))
          except:
            print(0)
          ")
            
            if [ "$TOTAL_CONTACTS" -gt 5 ]; then
              REMAINING=$((TOTAL_CONTACTS - 5))
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "*...and $REMAINING more contacts (see artifacts for complete list)*" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÅ Generated Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Comprehensive JSON report" >> $GITHUB_STEP_SUMMARY
          echo "- HTML report with full contact details" >> $GITHUB_STEP_SUMMARY  
          echo "- CSV contact list for analysis" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub issue notification created" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.send_notification.outputs.sent }}" == "true" ]; then
            echo "- Email notification sent with attachments" >> $GITHUB_STEP_SUMMARY
          fi
