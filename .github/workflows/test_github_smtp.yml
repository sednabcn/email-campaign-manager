name: Smtp_github_test

on:
  push:
    branches: ["dev"]
    
  
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in simulation mode'
        required: false
        default: true
        type: boolean
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

# Add permissions required by the reusable workflow
permissions:
  contents: write
  actions: read

jobs:
  # -------------------------------
  # Contact extraction job (calling reusable workflow)
  # -------------------------------
  contact-extraction:
    uses: sednabcn/services/.github/workflows/contact-extractor.yml@dev
    with:
      source_directory: "contact_details"
      output_directory: "contacts"

  # -------------------------------
  # Main campaign job (depends on contact extraction)
  # -------------------------------
  campaign:
    runs-on: ubuntu-latest
    needs: contact-extraction
    
    steps:
      - name: Checkout repository
        uses: sednabcn/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir \
            python-docx pyyaml pandas openpyxl requests jinja2 \
            gspread google-auth google-auth-oauthlib google-auth-httplib2

      # -------------------------------
      # Google Service Account Handling
      # -------------------------------
      - name: Decode Google Service Account credentials
        run: |
          echo "Decoding Base64 Google Service Account JSON..."

          if [ -z "${{ secrets.GOOGLE_SVC_JSON }}" ]; then
             echo "❌ GOOGLE_SVC_JSON is empty or not set"
             exit 1
          fi

          echo "${{ secrets.GOOGLE_SVC_JSON }}" | base64 --decode > google_service_account.json

          if [ ! -s google_service_account.json ]; then
             echo "❌ Failed to decode Google service account JSON"
             exit 1
          fi

          python3 -c "import json; d=json.load(open('google_service_account.json')); \
             print(f'✅ Project: {d.get(\"project_id\")}'); \
             print(f'✅ Client email: {d.get(\"client_email\")}')"

          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/google_service_account.json" >> $GITHUB_ENV
          echo "✅ Google Service Account JSON decoded and ready"

      - name: Test Google Sheets access
        run: |
          echo "=== TESTING GOOGLE SHEETS ACCESS ==="

          if [ ! -f "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
            echo "❌ Credentials file not found"
            exit 1
          fi

          python3 - <<'EOF'
          import gspread, json, os
          creds_file = os.environ['GOOGLE_APPLICATION_CREDENTIALS']
          with open(creds_file) as f:
              data = json.load(f)
              print(f"✅ Loaded creds for project: {data.get('project_id')}")
              print(f"✅ Service account email: {data.get('client_email')}")

          try:
              gc = gspread.service_account(filename=creds_file)
              print("✅ Google Sheets client initialized")
          except Exception as e:
              print(f"⚠️ Auth successful but sheet access may fail: {e}")
          EOF

      
      # -------------------------------
      # SMTP Quick Test
      # -------------------------------
      - name: Simple Gmail Test
        run: |
          python3 -c "
          import smtplib
          server = smtplib.SMTP('smtp.gmail.com', 587)
          server.starttls()
          server.login('${{ secrets.SMTP_USER }}', '${{ secrets.SMTP_PASS }}')
          print('✅ Gmail SMTP authentication successful!')
          server.quit()
          "

      # -------------------------------
      # Download contact extraction artifacts
      # -------------------------------
      - name: Download contact extraction results
        uses: actions/download-artifact@v4
        with:
          name: latest-contact-extraction-results
          path: ./contacts

      - name: Debug downloaded artifacts
        run: |
          echo "=== Checking downloaded artifacts ==="
          ls -la ./contacts/
          find ./contacts -name "*.csv" -type f
          echo "=== All CSV files in workspace ==="
          find . -name "*.csv" -type f
      # -------------------------------
      # Campaign Execution
      # -------------------------------
      - name: Create directory structure
        run: |
          mkdir -p contacts campaigns-resutls tracking
          echo "Directory structure ready"

      - name: Use real campaign script
        run: |
          # Check if utils/docx_parser.py exists in repository
          if [ -f "utils/docx_parser.py" ]; then
            echo "✅ Using existing utils/docx_parser.py from repository"
          else
            echo "❌ utils/docx_parser.py not found in repository"
            echo "The real campaign script should be at utils/docx_parser.py"
            exit 1
          fi
  
      - name: Run campaign system
        id: campaign
        run: |
          python utils/docx_parser.py \
            --contacts ./contacts \
            --scheduled ./scheduled-campaigns \
            --tracking ./tracking \
            --alerts ${{ secrets.ALERTS_EMAIL || secrets.SMTP_USER }} \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }} \
            ${{ github.event.inputs.debug == 'true' && '--debug' || '' }}
        env:
          GITHUB_ACTIONS: "true"
          CI: "true"
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      # -------------------------------
      # Summary Email Handling
      # -------------------------------
      - name: Prepare email summary content
        if: always()
        run: |
          if [ -f "dryrun.log" ]; then
            echo "Campaign execution completed at $(date)" > email_body.txt
            echo "" >> email_body.txt
            echo "=== CAMPAIGN SUMMARY ===" >> email_body.txt
            cat dryrun.log >> email_body.txt
          else
            echo "Campaign execution completed at $(date)" > email_body.txt
            echo "No detailed log available." >> email_body.txt
          fi

      - name: Detect SMTP provider
        id: smtp-config
        run: |
          host="${{ secrets.SMTP_HOST }}"
          if [[ "$host" == *"gmail.com"* ]]; then
            echo "provider=gmail" >> $GITHUB_OUTPUT
            echo "port=587" >> $GITHUB_OUTPUT
            echo "secure=true" >> $GITHUB_OUTPUT
          else
            echo "provider=custom" >> $GITHUB_OUTPUT
            echo "port=${{ secrets.SMTP_PORT || '587' }}" >> $GITHUB_OUTPUT
            echo "secure=true" >> $GITHUB_OUTPUT
          fi

      - name: Debug SMTP connection
        run: |
          echo "Testing connectivity..."
          nc -vz ${{ secrets.SMTP_HOST }} ${{ secrets.SMTP_PORT }}

      - name: Set secure flag based on port
        id: smtp-secure-flag
        run: |
          if [ "${{ secrets.SMTP_PORT }}" = "465" ]; then
            echo "secure=true" >> $GITHUB_OUTPUT
          else
            echo "secure=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug SMTP port
        run: |
          if [ "${{ secrets.SMTP_PORT }}" = "465" ]; then
             echo "Detected SMTPS (465) - will use SSL"
          else
             echo "Detected STARTTLS (not 465) - will use STARTTLS"
          fi

      - name: Send campaign summary
        uses: dawidd6/action-send-mail@v4
        if: always()
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ steps.smtp-config.outputs.port }}
          secure: true
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "Campaign Summary - ${{ github.run_started_at }}"
          to: ${{ secrets.ALERTS_EMAIL || secrets.SMTP_USER }}
          from: ${{ secrets.SMTP_USER }}
          body: file://email_body.txt
          attachments: |
            campaign_execution.log
            tracking/**/*
            *.json

      # -------------------------------
      # Artifact Upload
      # -------------------------------
      - name: Upload campaign artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: campaign-results-${{ github.run_number }}
          path: |
            *.log
            *.txt
            tracking/
            github_actions_emails/
            *.json
          retention-days: 30

      - name: Campaign completion summary
        if: always()
        run: |
          echo "=== CAMPAIGN WORKFLOW COMPLETED ===" >> $GITHUB_STEP_SUMMARY
          echo "Mode: ${{ github.event.inputs.dry_run == 'true' && 'DRY-RUN' || 'LIVE' }}" >> $GITHUB_STEP_SUMMARY
          echo "Debug: ${{ github.event.inputs.debug }}" >> $GITHUB_STEP_SUMMARY
          echo "SMTP Provider: ${{ steps.smtp-config.outputs.provider }}" >> $GITHUB_STEP_SUMMARY
          echo "Campaign Status: ${{ steps.campaign.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
          [ -f dryrun.log ] && tail -n 10 dryrun.log || echo "No log available"
