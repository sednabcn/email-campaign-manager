name: Creating_real_csv_contacts_Test

on:
  push:
    branches: ["dev"]
    
  
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in simulation mode'
        required: false
        default: true
        type: boolean
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

# Add permissions required by the reusable workflow
permissions:
  contents: write
  actions: read

jobs:
  # -------------------------------
  # Contact extraction job (calling reusable workflow)
  # -------------------------------
  contact-extraction:
    uses: sednabcn/services/.github/workflows/contact-extractor.yml@dev
    with:
      source_directory: "contact_details"
      output_directory: "contacts"

  # -------------------------------
  # Main campaign job (depends on contact extraction)
  # -------------------------------
  campaign:
    runs-on: ubuntu-latest
    needs: contact-extraction
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir \
            python-docx pyyaml pandas openpyxl requests jinja2 \
            gspread google-auth google-auth-oauthlib google-auth-httplib2
      # -------------------------------
      # Download contact extraction artifacts
      # -------------------------------
      - name: Download contact extraction results
        uses: actions/download-artifact@v4
        with:
          name: latest-contact-extraction-results
          path: ./contacts

      - name: Debug downloaded artifacts
        run: |
          echo "=== Checking workspace structure ==="
          ls -la ./
          echo ""
          echo "=== Checking contacts directory ==="
          ls -la ./contacts/ || echo "‚ùå contacts directory not found"
          echo ""
          echo "=== Looking for CSV files anywhere ==="
          find . -name "*.csv" -type f || echo "‚ùå No CSV files found"
          echo ""
          echo "=== Checking if campaign script exists ==="
          ls -la utils/docx_parser.py || echo "‚ùå utils/docx_parser.py not found"
      # -------------------------------
      # Campaign Execution
      # -------------------------------
      - name: Create directory structure
        run: |
          mkdir -p contacts campaigns-resutls tracking
          echo "Directory structure ready"

      # Replace your current "Use real campaign script" step with this:
      - name: Execute campaign script
        run: |
          # Find the most recent CSV file
          CSV_FILE=$(find ./contacts -name "*.csv" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
          
          if [ -n "$CSV_FILE" ] && [ -f "$CSV_FILE" ]; then
            echo "‚úÖ Using contact file: $CSV_FILE"
            echo "üìä Contact file contents:"
            head -3 "$CSV_FILE"
            echo ""
            
            # Execute the campaign script
            echo "üöÄ Running campaign with utils/docx_parser.py"
            echo "Command: python utils/docx_parser.py --input \"$CSV_FILE\""
            
            # Create output directory
            mkdir -p campaigns-results
            
            # Run your actual campaign script
            # Adjust parameters based on your script's interface
            python utils/docx_parser.py --input "$CSV_FILE" --output campaigns-results/ || {
              echo "‚ùå Campaign script failed, checking script help:"
              python utils/docx_parser.py --help || echo "No help available"
              exit 1
            }
            
            echo "‚úÖ Campaign execution completed"
            echo "üìÅ Output directory contents:"
            ls -la campaigns-results/ || echo "No output directory created"
            
          else
            echo "‚ùå No contact CSV file found"
            ls -la ./contacts/
            exit 1
          fi
          
      - name: Upload campaign results
        uses: actions/upload-artifact@v4
        with:
          name: campaign-results-${{ github.run_number }}
          path: campaigns-results/
          retention-days: 30
          if-no-files-found: warn

      
