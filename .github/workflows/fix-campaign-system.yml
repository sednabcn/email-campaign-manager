name: Fix Campaign System

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [dev, main, master ]
  pull_request:
    branches: [ dev, main, master ]

jobs:
  fix-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-docx openpyxl pandas
        
    - name: Create comprehensive fix script
      run: |
        cat > fix_campaign_system.sh << 'SCRIPT_EOF'
        #!/bin/bash
        
        echo "=== COMPREHENSIVE CAMPAIGN SYSTEM DIAGNOSTIC AND FIX ==="
        echo "Timestamp: $(date)"
        echo "Working Directory: $(pwd)"
        echo
        
        # 1. DIRECTORY STRUCTURE CHECK
        echo "1. CHECKING DIRECTORY STRUCTURE..."
        required_dirs=("contacts" "scheduled" "utils" "templates" "tracking")
        for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
                echo "✅ $dir/ exists"
                file_count=$(find "$dir" -type f | wc -l)
                echo "   - Contains $file_count files"
                if [ "$dir" = "contacts" ] || [ "$dir" = "scheduled" ]; then
                    find "$dir" -type f -name "*.csv" -o -name "*.xlsx" -o -name "*.json" -o -name "*.txt" | head -5 | while read file; do
                        echo "   - $file"
                    done
                fi
            else
                echo "❌ $dir/ missing - creating..."
                mkdir -p "$dir"
            fi
        done
        echo
        
        # 2. PYTHON MODULE CHECK
        echo "2. CHECKING PYTHON MODULES..."
        if [ ! -f "utils/__init__.py" ]; then
            echo "Creating utils/__init__.py..."
            touch utils/__init__.py
        fi
        
        if [ -f "utils/docx_parser.py" ]; then
            echo "✅ utils/docx_parser.py exists"
            lines=$(wc -l < utils/docx_parser.py)
            echo "   - $lines lines"
        else
            echo "❌ utils/docx_parser.py missing"
        fi
        echo
        
        # 3. CONTACT FILES CHECK
        echo "3. CHECKING CONTACT FILES..."
        contact_files=$(find contacts/ -name "*.csv" -o -name "*.xlsx" -o -name "*.json" 2>/dev/null | wc -l)
        echo "Found $contact_files contact files"
        
        if [ $contact_files -eq 0 ]; then
            echo "⚠️ No contact files found - creating sample..."
            cat > contacts/sample_contacts.csv << 'CSVEOF'
        name,email,company
        John Doe,john.doe@example.com,Example Corp
        Jane Smith,jane.smith@test.org,Test Organization
        Bob Johnson,bob.johnson@demo.net,Demo Company
        Alice Brown,alice.brown@sample.com,Sample Inc
        Charlie Wilson,charlie.wilson@testing.org,Testing LLC
        CSVEOF
            echo "✅ Created contacts/sample_contacts.csv with 5 contacts"
        fi
        echo
        
        # 4. CAMPAIGN FILES CHECK  
        echo "4. CHECKING CAMPAIGN FILES..."
        campaign_files=$(find scheduled/ -name "*.txt" -o -name "*.html" -o -name "*.json" -o -name "*.md" 2>/dev/null | wc -l)
        echo "Found $campaign_files campaign files"
        
        if [ $campaign_files -eq 0 ]; then
            echo "⚠️ No campaign files found - creating samples..."
            
            # Create JSON campaign
            cat > scheduled/welcome_campaign.json << 'JSONEOF'
        {
          "subject": "Welcome {{Contact Name}}!",
          "content": "Dear {{Contact Name}},\n\nThank you for your interest in our services at {{Company}}.\n\nWe look forward to working with you!\n\nBest regards,\nThe Team",
          "from_name": "Campaign System",
          "content_type": "text"
        }
        JSONEOF
        
            # Create HTML campaign
            cat > scheduled/newsletter.html << 'HTMLEOF'
        <html>
        <head><title>Newsletter</title></head>
        <body>
        <h1>Hello {{Contact Name}}!</h1>
        <p>Welcome to our newsletter from <strong>{{Company}}</strong>.</p>
        <p>This is a sample HTML campaign with template variables.</p>
        <p>Best regards,<br>The Marketing Team</p>
        </body>
        </html>
        HTMLEOF
        
            echo "✅ Created scheduled/welcome_campaign.json"
            echo "✅ Created scheduled/newsletter.html"
        fi
        echo
        
        # 5. PYTHON DEPENDENCIES CHECK
        echo "5. CHECKING PYTHON DEPENDENCIES..."
        python3 -c "
        import sys
        import os
        
        # Test basic imports
        modules = [
            ('os', True),
            ('sys', True), 
            ('json', True),
            ('argparse', True),
            ('csv', True),
            ('pathlib', True),
            ('datetime', True),
            ('re', True),
            ('traceback', True)
        ]
        
        optional_modules = [
            ('docx', False),
            ('openpyxl', False),
            ('pandas', False)
        ]
        
        print('Required modules:')
        all_required_ok = True
        for module, required in modules:
            try:
                __import__(module)
                print(f'✅ {module}')
            except ImportError as e:
                print(f'❌ {module}: {e}')
                if required:
                    all_required_ok = False
        
        print('\nOptional modules:')
        for module, required in optional_modules:
            try:
                __import__(module)
                print(f'✅ {module}')
            except ImportError as e:
                print(f'⚠️ {module}: {e}')
        
        if not all_required_ok:
            print('\n❌ Some required modules are missing')
            sys.exit(1)
        else:
            print('\n✅ All required modules available')
        "
        echo
        
        # 6. MODULE IMPORT TEST
        echo "6. TESTING MODULE IMPORTS..."
        python3 << 'PYEOF'
        import sys
        import os
        import traceback
        
        # Add current directory to path
        sys.path.insert(0, '.')
        sys.path.insert(0, 'utils')
        
        print("Python paths:")
        for i, path in enumerate(sys.path[:5]):
            print(f"  {i}: {path}")
        
        # Test the import
        try:
            print("\nTesting module import...")
            
            # Method 1: Try direct import
            try:
                import utils.docx_parser as parser
                print("✅ Direct import successful")
                has_main = hasattr(parser, 'campaign_main')
                print(f"  - campaign_main function: {'✅' if has_main else '❌'}")
                if has_main:
                    print("✅ Module ready for execution")
                    import sys
                    sys.exit(0)
            except Exception as e:
                print(f"❌ Direct import failed: {e}")
            
            # Method 2: Try importlib
            try:
                import importlib.util
                spec = importlib.util.spec_from_file_location("docx_parser", "utils/docx_parser.py")
                if spec and spec.loader:
                    parser = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(parser)
                    print("✅ Importlib method successful")
                    has_main = hasattr(parser, 'campaign_main')
                    print(f"  - campaign_main function: {'✅' if has_main else '❌'}")
                    if has_main:
                        print("✅ Module ready for execution")
                        import sys
                        sys.exit(0)
            except Exception as e:
                print(f"❌ Importlib method failed: {e}")
            
            print("❌ All import methods failed")
            sys.exit(1)
        
        except Exception as e:
            print(f"❌ Import test failed: {e}")
            traceback.print_exc()
            sys.exit(1)
        PYEOF
        
        if [ $? -eq 0 ]; then
            echo "✅ Python module imports working"
        else
            echo "❌ Python module import failed"
            exit 1
        fi
        echo
        
        echo "=== DIAGNOSTIC COMPLETE ==="
        echo "✅ All systems validated and ready"
        echo "✅ Sample data created"
        echo "✅ Directory structure confirmed"
        echo "✅ Python modules working"
        echo
        SCRIPT_EOF
        
        chmod +x fix_campaign_system.sh
        
    - name: Run campaign system fix
      run: |
        ./fix_campaign_system.sh
        
    - name: Test campaign execution (dry run)
      run: |
        echo "=== TESTING CAMPAIGN EXECUTION ==="
        python3 -c "
        import sys
        sys.path.insert(0, '.')
        sys.path.insert(0, 'utils')
        
        try:
            from utils.docx_parser import campaign_main
            print('✅ Campaign module imported successfully')
            
            print('Running dry-run test...')
            campaign_main(
                contacts_root='contacts',
                scheduled_root='scheduled', 
                tracking_root='tracking',
                alerts_email='test@github.com',
                dry_run=True,
                debug=True
            )
            print('✅ Campaign execution test successful')
            
        except Exception as e:
            print(f'❌ Campaign execution test failed: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
    - name: Display final status
      run: |
        echo ""
        echo "=== FINAL STATUS REPORT ==="
        echo "✅ Repository structure: FIXED"
        echo "✅ Contact files: $(find contacts/ -name "*.csv" -o -name "*.xlsx" | wc -l) files"
        echo "✅ Campaign files: $(find scheduled/ -name "*.json" -o -name "*.html" -o -name "*.txt" | wc -l) files"
        echo "✅ Python modules: WORKING"
        echo "✅ Campaign system: READY"
        echo ""
        echo "Your campaign system is now fully operational!"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: campaign-system-files
        path: |
          contacts/
          scheduled/
          tracking/
          *.log
