name: Gmail Feedback Tracking

on:
  workflow_call:
    inputs:
      hours_back:
        description: 'Hours to look back for feedback'
        required: false
        type: string
        default: '24'
      enable_unsubscribe_processing:
        description: 'Automatically process unsubscribe requests'
        required: false
        type: boolean
        default: true
  schedule:
    # Run every 4 hours to monitor feedback
    - cron: "0 */4 * * *"
  workflow_dispatch:
    inputs:
      hours_back:
        description: 'Hours to look back for feedback'
        required: false
        default: '24'
        type: string
      enable_unsubscribe_processing:
        description: 'Process unsubscribe requests'
        required: false
        default: true
        type: boolean

jobs:
  track-feedback:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      replies_found: ${{ steps.track_feedback.outputs.replies }}
      unsubscribes_found: ${{ steps.track_feedback.outputs.unsubscribes }}
      bounces_found: ${{ steps.track_feedback.outputs.bounces }}
      feedback_status: ${{ steps.track_feedback.outputs.status }}

    steps:
      - name: Checkout repository
        uses: sednabcn/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas==2.1.4 email-validator==2.1.0

      - name: Create tracking directories
        run: |
          mkdir -p tracking reports logs
          
          # Create feedback tracking config
          cat > tracking/feedback_config.json << 'EOF'
          {
            "tracking_enabled": true,
            "auto_unsubscribe": true,
            "bounce_handling": true,
            "engagement_analysis": true,
            "retention_days": 30,
            "notification_threshold": 5
          }
          EOF

      - name: Download previous tracking data
        uses: actions/download-artifact@v4
        with:
          name: feedback-tracking-data
          path: tracking/
        continue-on-error: true

      - name: Execute Gmail feedback tracking
        id: track_feedback
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          IMAP_HOST: ${{ secrets.IMAP_HOST || 'imap.gmail.com' }}
          SMTP_HOST: ${{ secrets.SMTP_HOST || 'smtp.gmail.com' }}
          HOURS_BACK: ${{ inputs.hours_back || '24' }}
          ENABLE_UNSUBSCRIBE: ${{ inputs.enable_unsubscribe_processing || 'true' }}
        run: |
          echo "Starting Gmail feedback tracking..."
          echo "Monitoring last ${{ inputs.hours_back || '24' }} hours"
          
          # Create the tracking script inline (for GitHub Actions)
          cat > gmail_feedback_tracker.py << 'TRACKER_SCRIPT'
          import imaplib
          import email
          import smtplib
          import ssl
          import json
          import re
          import time
          import os
          import sys
          from datetime import datetime, timedelta
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          
          def connect_gmail_imap(email_user, email_pass, host='imap.gmail.com'):
              try:
                  context = ssl.create_default_context()
                  imap = imaplib.IMAP4_SSL(host, 993, ssl_context=context)
                  imap.login(email_user, email_pass)
                  print(f"✅ Connected to IMAP: {host}")
                  return imap
              except Exception as e:
                  print(f"❌ IMAP connection failed: {e}")
                  return None
          
          def parse_email_message(msg):
              email_data = {
                  'from': msg.get('From', ''),
                  'to': msg.get('To', ''),
                  'subject': msg.get('Subject', ''),
                  'date': msg.get('Date', ''),
                  'message_id': msg.get('Message-ID', ''),
                  'content': ''
              }
              
              if msg.is_multipart():
                  for part in msg.walk():
                      if part.get_content_type() == "text/plain":
                          try:
                              email_data['content'] = part.get_payload(decode=True).decode('utf-8', errors='ignore')
                              break
                          except:
                              pass
              else:
                  try:
                      email_data['content'] = msg.get_payload(decode=True).decode('utf-8', errors='ignore')
                  except:
                      email_data['content'] = str(msg.get_payload())
              
              return email_data
          
          def classify_feedback_type(email_data):
              subject = email_data['subject'].lower()
              content = email_data['content'].lower()
              from_addr = email_data['from'].lower()
              
              # Bounce detection
              bounce_indicators = ['mailer-daemon', 'postmaster', 'undelivered', 'delivery failed', 'bounce']
              if any(indicator in from_addr or indicator in subject for indicator in bounce_indicators):
                  return 'bounce'
              
              # Unsubscribe detection
              unsubscribe_keywords = ['unsubscribe', 'remove me', 'opt out', 'stop sending', 'take me off']
              if any(keyword in subject or keyword in content for keyword in unsubscribe_keywords):
                  return 'unsubscribe'
              
              # Auto-reply detection
              auto_reply_keywords = ['auto-reply', 'out of office', 'vacation', 'automatic reply']
              if any(keyword in subject or keyword in content for keyword in auto_reply_keywords):
                  return 'auto_reply'
              
              # Regular reply
              if 're:' in subject or email_data.get('in_reply_to'):
                  return 'reply'
              
              return 'other'
          
          def analyze_sentiment(content):
              positive_words = ['interested', 'yes', 'please', 'more information', 'thank you', 'great']
              negative_words = ['not interested', 'no thanks', 'stop', 'spam', 'annoying', 'remove']
              
              content_lower = content.lower()
              positive_score = sum(1 for word in positive_words if word in content_lower)
              negative_score = sum(1 for word in negative_words if word in content_lower)
              
              if positive_score > negative_score:
                  return 'positive'
              elif negative_score > positive_score:
                  return 'negative'
              return 'neutral'
          
          def process_unsubscribe_request(email_data, smtp_user, smtp_pass):
              """Send unsubscribe confirmation"""
              try:
                  context = ssl.create_default_context()
                  server = smtplib.SMTP('smtp.gmail.com', 587)
                  server.starttls(context=context)
                  server.login(smtp_user, smtp_pass)
                  
                  msg = MIMEMultipart()
                  msg['From'] = smtp_user
                  msg['To'] = email_data['from']
                  msg['Subject'] = 'Unsubscribe Confirmation'
                  
                  body = f"""
          Dear Subscriber,
          
          Your unsubscribe request has been processed successfully.
          You will no longer receive emails from us at: {email_data['from']}
          
          If this was sent in error, please reply to this email.
          
          Best regards,
          Email Campaign System
                  """
                  
                  msg.attach(MIMEText(body, 'plain'))
                  server.send_message(msg)
                  server.quit()
                  
                  print(f"✅ Sent unsubscribe confirmation to {email_data['from']}")
                  return True
                  
              except Exception as e:
                  print(f"❌ Failed to send unsubscribe confirmation: {e}")
                  return False
          
          def main():
              email_user = os.getenv('SMTP_USER')
              email_pass = os.getenv('SMTP_PASS')
              hours_back = int(os.getenv('HOURS_BACK', '24'))
              enable_unsubscribe = os.getenv('ENABLE_UNSUBSCRIBE', 'true').lower() == 'true'
              
              if not email_user or not email_pass:
                  print("❌ Gmail credentials not provided")
                  return 1
              
              print(f"Monitoring Gmail inbox for last {hours_back} hours...")
              
              # Connect to Gmail
              imap = connect_gmail_imap(email_user, email_pass)
              if not imap:
                  return 1
              
              # Initialize tracking data
              tracking_data = {
                  'replies': [],
                  'unsubscribes': [],
                  'bounces': [],
                  'auto_replies': [],
                  'other': []
              }
              
              try:
                  # Select inbox
                  imap.select('INBOX')
                  
                  # Search for recent emails
                  since_date = (datetime.now() - timedelta(hours=hours_back)).strftime('%d-%b-%Y')
                  status, messages = imap.search(None, f'SINCE {since_date}')
                  
                  if status != 'OK':
                      print(f"❌ Search failed: {status}")
                      return 1
                  
                  message_ids = messages[0].split()
                  print(f"Found {len(message_ids)} emails to analyze")
                  
                  for msg_id in message_ids:
                      try:
                          # Fetch email
                          status, msg_data = imap.fetch(msg_id, '(RFC822)')
                          if status != 'OK':
                              continue
                              
                          email_message = email.message_from_bytes(msg_data[0][1])
                          email_data = parse_email_message(email_message)
                          
                          # Skip our own emails
                          if email_user.lower() in email_data['from'].lower():
                              continue
                          
                          # Classify email type
                          feedback_type = classify_feedback_type(email_data)
                          
                          # Create tracking entry
                          tracking_entry = {
                              'timestamp': datetime.now().isoformat(),
                              'from': email_data['from'],
                              'subject': email_data['subject'],
                              'type': feedback_type,
                              'content_preview': email_data['content'][:150] + '...' if len(email_data['content']) > 150 else email_data['content']
                          }
                          
                          if feedback_type == 'reply':
                              sentiment = analyze_sentiment(email_data['content'])
                              tracking_entry['sentiment'] = sentiment
                              tracking_data['replies'].append(tracking_entry)
                              print(f"📧 Reply from {email_data['from']}: {sentiment} sentiment")
                              
                          elif feedback_type == 'unsubscribe':
                              if enable_unsubscribe:
                                  confirmation_sent = process_unsubscribe_request(email_data, email_user, email_pass)
                                  tracking_entry['confirmation_sent'] = confirmation_sent
                              tracking_data['unsubscribes'].append(tracking_entry)
                              print(f"🚫 Unsubscribe request from {email_data['from']}")
                              
                          elif feedback_type == 'bounce':
                              tracking_data['bounces'].append(tracking_entry)
                              print(f"⚠️ Bounce detected from {email_data['from']}")
                              
                          elif feedback_type == 'auto_reply':
                              tracking_data['auto_replies'].append(tracking_entry)
                              print(f"🤖 Auto-reply from {email_data['from']}")
                              
                          else:
                              tracking_data['other'].append(tracking_entry)
                      
                      except Exception as e:
                          print(f"❌ Error processing message: {e}")
                          continue
                  
                  # Save tracking data
                  os.makedirs('tracking', exist_ok=True)
                  
                  with open('tracking/feedback_report.json', 'w') as f:
                      json.dump({
                          'timestamp': datetime.now().isoformat(),
                          'monitoring_period_hours': hours_back,
                          'summary': {
                              'total_replies': len(tracking_data['replies']),
                              'total_unsubscribes': len(tracking_data['unsubscribes']),
                              'total_bounces': len(tracking_data['bounces']),
                              'total_auto_replies': len(tracking_data['auto_replies']),
                              'positive_replies': len([r for r in tracking_data['replies'] if r.get('sentiment') == 'positive']),
                              'negative_replies': len([r for r in tracking_data['replies'] if r.get('sentiment') == 'negative']),
                              'neutral_replies': len([r for r in tracking_data['replies'] if r.get('sentiment') == 'neutral'])
                          },
                          'detailed_data': tracking_data
                      }, f, indent=2)
                  
                  # Generate summary report
                  summary = {
                      'replies': len(tracking_data['replies']),
                      'unsubscribes': len(tracking_data['unsubscribes']),
                      'bounces': len(tracking_data['bounces']),
                      'auto_replies': len(tracking_data['auto_replies']),
                      'other': len(tracking_data['other'])
                  }
                  
                  # Output for GitHub Actions
                  print(f"::set-output name=replies::{summary['replies']}")
                  print(f"::set-output name=unsubscribes::{summary['unsubscribes']}")
                  print(f"::set-output name=bounces::{summary['bounces']}")
                  print(f"::set-output name=status::success")
                  
                  print("\n📊 Feedback Tracking Summary:")
                  print(f"   📧 Replies: {summary['replies']}")
                  print(f"   🚫 Unsubscribes: {summary['unsubscribes']}")
                  print(f"   ⚠️ Bounces: {summary['bounces']}")
                  print(f"   🤖 Auto-replies: {summary['auto_replies']}")
                  print(f"   📋 Other: {summary['other']}")
                  
                  return 0
                  
              except Exception as e:
                  print(f"❌ Error during tracking: {e}")
                  print(f"::set-output name=status::failed")
                  return 1
              finally:
                  if imap:
                      imap.close()
                      imap.logout()
          
          if __name__ == "__main__":
              sys.exit(main())
          TRACKER_SCRIPT
          
          # Run the tracking script
          python gmail_feedback_tracker.py

      - name: Generate HTML report
        if: always()
        run: |
          cat > reports/feedback_report.html << 'HTML_REPORT'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Gmail Feedback Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .summary { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                  .metric { display: inline-block; margin: 10px; padding: 10px; background: white; border-radius: 3px; border-left: 4px solid #007cba; }
                  .positive { border-left-color: #28a745; }
                  .negative { border-left-color: #dc3545; }
                  .warning { border-left-color: #ffc107; }
                  table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                  th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f2f2f2; }
              </style>
          </head>
          <body>
              <h1>Gmail Feedback Tracking Report</h1>
              <div class="summary">
                  <h2>Summary</h2>
                  <div class="metric positive">
                      <strong>${{ steps.track_feedback.outputs.replies || 0 }}</strong><br>
                      Replies Received
                  </div>
                  <div class="metric warning">
                      <strong>${{ steps.track_feedback.outputs.unsubscribes || 0 }}</strong><br>
                      Unsubscribe Requests
                  </div>
                  <div class="metric negative">
                      <strong>${{ steps.track_feedback.outputs.bounces || 0 }}</strong><br>
                      Email Bounces
                  </div>
              </div>
              
              <p><strong>Report Generated:</strong> $(date)</p>
              <p><strong>Monitoring Period:</strong> Last ${{ inputs.hours_back || '24' }} hours</p>
              <p><strong>Status:</strong> ${{ steps.track_feedback.outputs.status || 'unknown' }}</p>
              
              <h3>Detailed Analysis</h3>
              <p>For detailed feedback data, check the JSON report in the artifacts.</p>
              
          </body>
          </html>
          HTML_REPORT

      - name: Upload tracking artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: feedback-tracking-data
          path: |
            tracking/
            reports/
          retention-days: 30

      - name: Create notification summary
        if: always()
        run: |
          echo "## Gmail Feedback Tracking Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Period:** Last ${{ inputs.hours_back || '24' }} hours" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.track_feedback.outputs.status || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- 📧 **Replies:** ${{ steps.track_feedback.outputs.replies || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚫 **Unsubscribes:** ${{ steps.track_feedback.outputs.unsubscribes || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Bounces:** ${{ steps.track_feedback.outputs.bounces || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Detailed reports available in workflow artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Alert on high unsubscribe rate
        if: steps.track_feedback.outputs.unsubscribes > 5
        run: |
          echo "⚠️ HIGH UNSUBSCRIBE RATE DETECTED: ${{ steps.track_feedback.outputs.unsubscribes }} unsubscribes"
          echo "Consider reviewing your email content and frequency."
