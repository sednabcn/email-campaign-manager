# .github/workflows/contact-extractor.yml
name: Contact Details Extractor - Using Separate Script

permissions:
  contents: write

on:
  push:
    branches: ["dev"]
  
  workflow_dispatch:
    inputs:
      source_directory:
        description: 'Top-level directory containing .txt files (recursively searched)'
        required: false
        default: 'contact_details'
        type: string
      output_directory:
        description: 'Output directory for generated CSV files'
        required: false
        default: 'contacts'
        type: string
      commit_results:
        description: 'Commit the generated CSV back to the repository'
        required: false
        default: false
        type: boolean

  workflow_call:
    inputs:
      source_directory:
        required: false
        type: string
        default: 'contact_details'
      output_directory:
        required: false
        type: string
        default: 'contacts'
    outputs:
      csv_file:
        description: 'Path to the generated CSV file'
        value: ${{ jobs.extract-contacts.outputs.csv_file }}
      csv_filename:
        description: 'Name of the generated CSV file'
        value: ${{ jobs.extract-contacts.outputs.csv_filename }}
      record_count:
        description: 'Number of records extracted'
        value: ${{ jobs.extract-contacts.outputs.record_count }}
      artifact_name:
        description: 'Name of the uploaded artifact'
        value: ${{ jobs.extract-contacts.outputs.artifact_name }}


concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true


env:
  PYTHON_VERSION: '3.11'

jobs:
  extract-contacts:
    runs-on: ubuntu-latest
    outputs:
      csv_file: ${{ steps.extraction.outputs.csv_file }}
      csv_filename: ${{ steps.extraction.outputs.csv_filename }}
      record_count: ${{ steps.extraction.outputs.record_count }}
      file_size: ${{ steps.extraction.outputs.file_size }}
      artifact_name: ${{ steps.upload.outputs.artifact_name }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Debug workspace structure
      run: |
        echo "=== Current workspace structure ==="
        pwd
        ls -la
        echo ""
        echo "=== Looking for source directory ==="
        SOURCE_DIR="${{ inputs.source_directory || 'contact_details' }}"
        if [ -d "$SOURCE_DIR" ]; then
          echo "Source directory '$SOURCE_DIR' exists"
          echo "Contents:"
          find "$SOURCE_DIR" -type f -name "*.txt" | head -10
          echo "Total .txt files: $(find "$SOURCE_DIR" -type f -name "*.txt" | wc -l)"
        else
          echo "ERROR: Source directory '$SOURCE_DIR' does not exist"
          echo "Available directories:"
          ls -la
        fi

    - name: Verify extraction script exists
      run: |
        if [ -f ".github/scripts/extract_contacts.py" ]; then
          echo "✅ Extraction script found: .github/scripts/extract_contacts.py"
          echo "Script details:"
          ls -la .github/scripts/extract_contacts.py
          echo ""
          echo "Script preview (first 10 lines):"
          head -10 .github/scripts/extract_contacts.py
        else
          echo "❌ ERROR: Extraction script not found at .github/scripts/extract_contacts.py"
          echo "Available files in .github/scripts/:"
          ls -la .github/scripts/ 2>/dev/null || echo "Directory does not exist"
          echo ""
          echo "Please ensure the script is committed to your repository at:"
          echo "  .github/scripts/extract_contacts.py"
          exit 1
        fi

    - name: Make extraction script executable
      run: |
        chmod +x .github/scripts/extract_contacts.py
        echo "Made extraction script executable"

    - name: Run contact extraction
      id: extraction
      run: |
        SOURCE_DIR="${{ inputs.source_directory || 'contact_details' }}"
        OUTPUT_DIR="${{ inputs.output_directory || 'contacts' }}"

        echo "=== Starting contact extraction ==="
        echo "Source: $SOURCE_DIR"
        echo "Output: $OUTPUT_DIR"
        echo "Python version: $(python --version)"
        echo "Current directory: $(pwd)"
        echo ""

        # Run the extraction script
        python .github/scripts/extract_contacts.py "$SOURCE_DIR" "$OUTPUT_DIR"

        echo ""
        echo "=== Verifying output ==="
        
        # Check if output directory was created
        if [ -d "$OUTPUT_DIR" ]; then
          echo "Output directory exists: $OUTPUT_DIR"
          echo "Directory contents:"
          ls -la "$OUTPUT_DIR"
          
          # Find the CSV file
          CSV_FILE=$(find "$OUTPUT_DIR" -type f -name "*.csv" | head -1)
          if [ -n "$CSV_FILE" ] && [ -f "$CSV_FILE" ]; then
            echo "CSV file found: $CSV_FILE"
            CSV_FILENAME=$(basename "$CSV_FILE")
            
            # Get file details
            FILE_SIZE=$(stat -c%s "$CSV_FILE" 2>/dev/null || stat -f%z "$CSV_FILE" 2>/dev/null || echo "unknown")
            RECORD_COUNT=$(tail -n +2 "$CSV_FILE" | wc -l)
            
            echo "File details:"
            echo "  Filename: $CSV_FILENAME"
            echo "  Full path: $CSV_FILE" 
            echo "  Size: $FILE_SIZE bytes"
            echo "  Records: $RECORD_COUNT"
            
            # Set outputs for the workflow
            echo "csv_file=$CSV_FILE" >> $GITHUB_OUTPUT
            echo "csv_filename=$CSV_FILENAME" >> $GITHUB_OUTPUT
            echo "file_size=$FILE_SIZE" >> $GITHUB_OUTPUT
            echo "record_count=$RECORD_COUNT" >> $GITHUB_OUTPUT
            
            echo "SUCCESS: All outputs set for workflow"
          else
            echo "ERROR: No CSV file found in output directory"
            echo "Available files:"
            find "$OUTPUT_DIR" -type f || echo "No files found"
            exit 1
          fi
        else
          echo "ERROR: Output directory was not created"
          exit 1
        fi

        
    - name: Display extraction results
      if: steps.extraction.outputs.csv_file
      run: |
        CSV_FILE="${{ steps.extraction.outputs.csv_file }}"
        echo "=== Extraction Results Summary ==="
        echo "✅ Output file: $CSV_FILE"
        echo "📊 File size: ${{ steps.extraction.outputs.file_size }} bytes"
        echo "📋 Records: ${{ steps.extraction.outputs.record_count }}"
        echo ""
        echo "CSV content preview (first 10 lines):"
        head -n 10 "$CSV_FILE" || echo "Could not read CSV file"

    - name: Upload CSV as artifact
      id: upload
      if: steps.extraction.outputs.csv_file
      uses: actions/upload-artifact@v4
      with:
        name: latest-contact-extraction-results
        path: ${{ inputs.output_directory || 'contacts' }}/
        retention-days: 30

    - name: Set artifact name output
      run: |
        echo "artifact_name=latest-contact-extraction-results" >> $GITHUB_OUTPUT

    - name: Commit and push results (if requested)
      if: >
        steps.extraction.outputs.csv_file &&
        (inputs.commit_results == true) &&
        github.event_name != 'workflow_call'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${{ steps.extraction.outputs.csv_file }}"
        git commit -m "Add extracted contacts: ${{ steps.extraction.outputs.csv_filename }}" || echo "No changes to commit"
        git push || echo "Nothing to push"

    - name: Commit and push results
      if: steps.extraction.outputs.csv_file && github.event_name != 'workflow_call'
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

        git fetch origin
        BRANCH="${GITHUB_REF#refs/heads/}"
        git checkout "$BRANCH"
        git pull --rebase --autostash || true

        git add contacts/*.csv
        git commit -m "Add contacts CSV: ${{ steps.extraction.outputs.csv_filename }}" || echo "No changes to commit"
        git push origin HEAD:$BRANCH

    - name: Job summary
      if: always()
      run: |
        echo "## Contact Extraction Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.extraction.outputs.csv_file }}" ]; then
          echo "✅ **Contact extraction completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Output file**: \`${{ steps.extraction.outputs.csv_filename }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Records extracted**: ${{ steps.extraction.outputs.record_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **File size**: ${{ steps.extraction.outputs.file_size }} bytes" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact name**: \`latest-contact-extraction-results\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Source Structure:" >> $GITHUB_STEP_SUMMARY
          echo "- **Source directory**: \`${{ inputs.source_directory || 'contact_details' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Output directory**: \`${{ inputs.output_directory || 'contacts' }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Contact extraction failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for error details." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Script**: \`.github/scripts/extract_contacts.py\`" >> $GITHUB_STEP_SUMMARY

        
